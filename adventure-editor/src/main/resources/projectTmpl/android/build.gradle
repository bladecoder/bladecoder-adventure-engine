apply plugin: 'android'

android {
    buildToolsVersion latestBuildToolsAvailable("%BUILD_TOOLS_VERSION%")
    compileSdkVersion highestSdkAvailable(%API_LEVEL%)

    defaultConfig {
        applicationId "%PACKAGE%"
        minSdkVersion 15
        targetSdkVersion %API_LEVEL% 
        versionName version

        if(project.hasProperty('versionCode'))
          versionCode project.versionCode.toInteger()
        else
          versionCode 1

	    buildConfigField "int", "EXPANSION_FILE_VERSION", "0"
    }

    productFlavors {
	    full {
	    }

        expansion {
		    buildConfigField "int", "EXPANSION_FILE_VERSION",  String.valueOf(android.defaultConfig.versionCode)
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['libs']
        }

	full.assets.srcDirs = ['../assets']
 	expansion.assets.srcDirs = ['../base-assets']

        instrumentTest.setRoot('tests')
    }
    
  packagingOptions {
    // Preventing from license violations (more or less):
    pickFirst 'META-INF/LICENSE.txt'
    pickFirst 'META-INF/LICENSE'
    pickFirst 'META-INF/license.txt'
    pickFirst 'META-INF/LGPL2.1'
    pickFirst 'META-INF/NOTICE.txt'
    pickFirst 'META-INF/NOTICE'
    pickFirst 'META-INF/notice.txt'
    // Excluding unnecessary meta-data:
    exclude 'META-INF/robovm/ios/robovm.xml'
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/dependencies.txt'
  }    

    if(project.hasProperty('keystore')) {
          signingConfigs {
            release {
              storeFile file(project.keystore)
              storePassword project.storePassword
              keyAlias project.alias
              keyPassword project.keyPassword
            }
          }

          buildTypes {
            release {
            	  signingConfig signingConfigs.release
            }
          }
    }

    buildTypes {
          release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
           }
    }
}

configurations { natives }

dependencies {
   	compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', android.defaultConfig.applicationId + '/' + android.defaultConfig.applicationId + '.AndroidLauncher'
}

task('packageMainExpansionFile', type: Zip) {

   FileTree tree = fileTree(dir: '../assets')

   from tree
   //into 'assets'

   // Expansion file name format: main.versionCode.packageName.obb
   entryCompression = ZipEntryCompression.STORED
   archiveName = 'main.' + android.defaultConfig.versionCode + "." + android.defaultConfig.applicationId + ".obb"

   println "Generating main." + archiveName

}

tasks.whenTaskAdded { task ->
   if(task.name == 'generateExpansionReleaseBuildConfig') {
       task.dependsOn packageMainExpansionFile
   }
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitely, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src/main/java", 'gen'
        }
    }

    jdt {
        sourceCompatibility=1.7
        targetCompatibility=1.7
    }

    classpath {
        plusConfigurations += [ project.configurations.compile ]
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}


int highestSdkAvailable(int defaultSdk) {
  try {
      def buildToolsDir = new File(android.getSdkDirectory().toString(), "platforms")
      def sdks = buildToolsDir.list([accept:{ d, f-> f.startsWith("android-") && new File(d, f).isDirectory() }] as FilenameFilter).sort { a, b -> b <=> a }
      def highestSdk = sdks[0]
      if (highestSdk != null) {
          println "Using highest found SDK " + highestSdk.substring(8)
          highestSdk.substring(8).toInteger()
      } else {
          println "No installed SDKs found. Using default SDK " + defaultSdk
          defaultSdk
      }
  } catch (any) {
      println "Exception while determining highest SDK. Using default SDK " +
              defaultSdk
      defaultSdk
  }
}

String latestBuildToolsAvailable(String defaultBuildTools) {
  try {
      def buildToolsDir = new File(android.getSdkDirectory().toString(), "build-tools")
      def buildToolsVersions = buildToolsDir.list([accept:{ d, f-> new File(d, f).isDirectory() }] as FilenameFilter).sort { a, b -> b <=> a }
      def latestBuildTools = buildToolsVersions[0]
      if (latestBuildTools != null) {
          println "Using latest found build tools " + latestBuildTools
          latestBuildTools
      } else {
          println "No installed build tools found. Using default build tools " +
                  defaultBuildTools
          defaultBuildTools
      }
  } catch (any) {
      println "Exception while determining latest build tools. Using default build tools " +
              defaultBuildTools
      defaultBuildTools
  }
}